{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["rootURL","axios","get","then","response","data","newObject","post","id","put","delete","Filter","props","value","filterText","onChange","handleFilterChange","PersonForm","onSubmit","handleSubmit","newName","handlePersonChange","newNumber","handleNumberChange","type","Person","person","handleDelete","name","number","onClick","Notification","message","className","App","useState","persons","setPersons","setNewName","setNewNumber","setNewFilter","filteredPersons","setFilteredPersons","errorMessage","setErrorMessage","errorType","setErrorType","useEffect","console","log","personService","initialPersons","event","target","newPersons","filter","toLowerCase","includes","preventDefault","duplicate","find","undefined","returnedPerson","concat","setTimeout","window","confirm","changedPerson","map","catch","error","p","updatePerson","i","key","personID","toDelete","deletePersonOf","ReactDOM","render","document","getElementById"],"mappings":"0OACMA,EAAU,eAsBD,EApBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB9B,EAfO,SAACC,GAEnB,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVO,SAACG,EAAIF,GAEvB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALO,SAACG,GAEnB,OADgBP,IAAMS,OAAN,UAAgBV,EAAhB,YAA2BQ,KCPhCG,EAVA,SAACC,GACZ,OACI,kDACsB,2BACdC,MAAOD,EAAME,WACbC,SAAUH,EAAMI,uBCgBjBC,EArBI,SAACL,GAEhB,OACE,0BAAMM,SAAUN,EAAMO,cACpB,sCACQ,2BACJN,MAAOD,EAAMQ,QACbL,SAAUH,EAAMS,sBAEpB,wCACU,2BACNR,MAAOD,EAAMU,UACbP,SAAUH,EAAMW,sBAEpB,6BACE,4BAAQC,KAAK,UAAb,UCAKC,EAfA,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aAGtB,OACI,4BACI,4BAAKD,EAAOE,KAAZ,KACA,4BAAKF,EAAOG,OAAZ,KACA,4BACI,4BAAQC,QAASH,GAAjB,aCIDI,EAZM,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASR,EAAW,EAAXA,KAC7B,OAAgB,OAAZQ,EACO,KAIP,yBAAKC,UAAWT,GACXQ,ICgMEE,EAlMH,WAAM,MAGgBC,mBAAS,IAHzB,mBAGRC,EAHQ,KAGCC,EAHD,OAMgBF,mBAAS,IANzB,mBAMRf,EANQ,KAMCkB,EAND,OASoBH,mBAAS,IAT7B,mBASRb,EATQ,KASGiB,EATH,OAYqBJ,mBAAS,IAZ9B,mBAYRrB,EAZQ,KAYI0B,EAZJ,OAagCL,mBAAS,IAbzC,mBAaRM,EAbQ,KAaSC,EAbT,OAgBwBP,mBAAS,MAhBjC,mBAgBTQ,EAhBS,KAgBKC,EAhBL,OAiBkBT,mBAAS,MAjB3B,mBAiBTU,EAjBS,KAiBEC,EAjBF,KAoBhBC,qBAAU,WACRC,QAAQC,IAAI,UACZC,IAEG/C,MAAK,SAAAgD,GACJH,QAAQC,IAAI,qBACZZ,EAAWc,GACXT,EAAmBS,QAEtB,IAkIH,OACE,6BACE,yCACA,kBAAC,EAAD,CAAcnB,QAASW,EAAcnB,KAAMqB,IAE3C,kBAAC,EAAD,CACE/B,WAAYA,EACZE,mBArDqB,SAACoC,GAC1BJ,QAAQC,IAAIG,EAAMC,OAAOxC,OAEzB2B,EAAaY,EAAMC,OAAOxC,OAC1B,IAAMyC,EAAoC,KAAvBF,EAAMC,OAAOxC,MAC5BuB,EACAA,EAAQmB,QAAO,SAAA7B,GAAM,OAAIA,EAAOE,KAAK4B,cAAcC,SAASL,EAAMC,OAAOxC,MAAM2C,kBACnFd,EAAmBY,MAgDjB,yCAEA,kBAAC,EAAD,CACEnC,aA3GY,SAACiC,GACjBA,EAAMM,iBAGN,IAAMC,EAAYvB,EAAQwB,MAAK,SAAAlC,GAAM,OAAIA,EAAOE,OAASR,UACvCyC,IAAdF,EAWJT,EANqB,CACnBtB,KAAMR,EACNS,OAAQP,IAMPnB,MAAK,SAAA2D,GACJzB,EAAWD,EAAQ2B,OAAOD,IAC1BxB,EAAW,IACXC,EAAa,KAEM,KAAfzB,GAAqBgD,EAAelC,KAAK4B,cAAcC,SAAS3C,EAAW0C,iBAC7Ed,EAAmBD,EAAgBsB,OAAOD,IAE5ChB,EAAa,WACbF,EAAgB,GAAD,OACVkB,EAAelC,KADL,gCAGfoC,YAAW,WACTpB,EAAgB,QACf,QAhEY,SAACe,GAGpB,GADeM,OAAOC,QAAP,UAAkB9C,EAAlB,uEACH,CACV,IAAM+C,EAAa,2BAAOR,GAAP,IAAkB9B,OAAQP,IAC7C4B,EACiBS,EAAUnD,GAAI2D,GAC5BhE,MAAK,SAAA2D,GACJzB,EAAWD,EAAQgC,KAAI,SAAA1C,GAAM,OAAIA,EAAOlB,KAAOmD,EAAUnD,GAAKkB,EAASoC,MACvExB,EAAW,IACXC,EAAa,IACbG,EAAmBD,EAAgB2B,KAAI,SAAA1C,GAAM,OAAIA,EAAOlB,KAAOmD,EAAUnD,GAAKkB,EAASoC,MACvFhB,EAAa,WACbF,EAAgB,GAAD,OACVkB,EAAelC,KADL,iBAGfoC,YAAW,WACTpB,EAAgB,QACf,QAEJyB,OAAM,SAAAC,GACL5B,EAAmBD,EAAgBc,QAAO,SAAAgB,GAAC,OAAIA,EAAE/D,KAAOmD,EAAUnD,OAClEsC,EAAa,SACbF,EAAgB,GAAD,OACVe,EAAU/B,KADA,yCAGfoC,YAAW,WACTpB,EAAgB,QACf,SAUP4B,CAAab,IAsGXtC,mBAvEqB,SAAC+B,GAC1BJ,QAAQC,IAAIG,EAAMC,OAAOxC,OACzByB,EAAWc,EAAMC,OAAOxC,QAsEpBU,mBAlEqB,SAAC6B,GAC1BJ,QAAQC,IAAIG,EAAMC,OAAOxC,OACzB0B,EAAaa,EAAMC,OAAOxC,QAiEtBO,QAASA,EACTE,UAAWA,IAGb,uCACA,+BACE,+BACGmB,EAAgB2B,KAAI,SAAC1C,EAAQ+C,GAAT,OACnB,kBAAC,EAAD,CACEC,IAAKD,EACL/C,OAAQA,EACRC,aAAc,kBA7DH,SAACgD,GAEtB,IAAMC,EAAWxC,EAAQwB,MAAK,SAAAW,GAAC,OAAIA,EAAE/D,KAAOmE,KAC7BV,OAAOC,QAAP,iBAAyBU,EAAShD,KAAlC,OAMfsB,EACiByB,GACdxE,MAAK,WACJ6C,QAAQC,IAAI,WACZZ,EAAWD,EAAQmB,QAAO,SAAA7B,GAAM,OAAIA,EAAOlB,KAAOmE,MAClDjC,EAAmBD,EAAgBc,QAAO,SAAA7B,GAAM,OAAIA,EAAOlB,KAAOmE,MAClE7B,EAAa,WACbF,EAAgB,GAAD,OACVgC,EAAShD,KADC,oCAGfoC,YAAW,WACTpB,EAAgB,QACf,QAEJyB,OAAM,SAAAC,GACLxB,EAAa,SACbF,EAAgB,GAAD,OACVgC,EAAShD,KADC,yCAGfoC,YAAW,WACTpB,EAAgB,QACf,QA+BuBiC,CAAenD,EAAOlB,c,MC1LxDsE,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.0c599554.chunk.js","sourcesContent":["import axios from 'axios';\nconst rootURL = '/api/persons';\n\nconst getAll = () => {\n    const request = axios.get(rootURL);\n    return request.then(response => response.data);\n};\n\nconst createContact = (newObject) => {\n    const request = axios.post(rootURL, newObject);\n    return request.then(response => response.data);\n};\n\nconst updateContact = (id, newObject) => {\n    const request = axios.put(`${rootURL}/${id}`, newObject);\n    return request.then(response => response.data);\n};\n\nconst deleteContact = (id) => {\n    const request = axios.delete(`${rootURL}/${id}`);\n    return request;\n};\n\nexport default {getAll, createContact, updateContact, deleteContact};\n","import React from 'react';\n\nconst Filter = (props) => {\n    return (\n        <div>\n            filter shown with <input\n                value={props.filterText}\n                onChange={props.handleFilterChange} />\n        </div>\n    )\n};\n\nexport default Filter;\n","import React from 'react';\n\nconst PersonForm = (props) => {\n    //\n    return (\n      <form onSubmit={props.handleSubmit}>\n        <div>\n          name: <input \n            value={props.newName}\n            onChange={props.handlePersonChange} />\n        </div>\n        <div>\n          number: <input \n            value={props.newNumber}\n            onChange={props.handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n};\n\nexport default PersonForm;\n","import React from 'react';\n\nconst Person = ( {person, handleDelete} ) => {\n    // Display the contents of the phonebook\n    // Format: Name number\n    return (\n        <tr>\n            <td>{person.name} </td>\n            <td>{person.number} </td>\n            <td>\n                <button onClick={handleDelete} >delete</button>\n            </td>\n        </tr>\n    )\n    \n};\n\nexport default Person;\n","import React from 'react';\n\nconst Notification = ( {message, type} ) => {\n    if (message === null) {\n        return null;\n    };\n\n    return (\n        <div className={type}>\n            {message}\n        </div>\n    );\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\nimport personService from './services/persons';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Person from './components/Persons';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  // *** state variable and update functions *** \n  // to track a list of people in the phonebook\n  const [ persons, setPersons ] = useState([]);\n  \n  // used to control the first form input element\n  const [ newName, setNewName ] = useState('');\n\n  // used to control the second form input element\n  const [ newNumber, setNewNumber ] = useState('');\n\n  // used to control the filter input element\n  const [ filterText, setNewFilter ] = useState('');\n  const [ filteredPersons, setFilteredPersons ] = useState([]);\n\n  // used to control the error message\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [errorType, setErrorType] = useState(null);\n\n  // fetch initial data from the server\n  useEffect(() => {\n    console.log('effect');\n    personService\n      .getAll()\n      .then(initialPersons => {\n        console.log('promise fulfilled');\n        setPersons(initialPersons);\n        setFilteredPersons(initialPersons);\n      })\n  }, []); // empty array parameter: only use effect on first render\n\n  // handle the form submission\n  const updatePerson = (duplicate) => {\n    // confirm update\n    const result = window.confirm(`${newName} is already added to phonebook, replace old number with a new one?`)\n    if (result) {\n      const changedPerson = {...duplicate, number: newNumber};\n      personService\n        .updateContact(duplicate.id, changedPerson)\n        .then(returnedPerson => {\n          setPersons(persons.map(person => person.id !== duplicate.id ? person : returnedPerson));\n          setNewName('');\n          setNewNumber('');\n          setFilteredPersons(filteredPersons.map(person => person.id !== duplicate.id ? person : returnedPerson));\n          setErrorType('message');\n          setErrorMessage(\n            `${returnedPerson.name} was updated`\n          );\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 3000); // leave the message for at least 3 seconds\n        })\n        .catch(error => {\n          setFilteredPersons(filteredPersons.filter(p => p.id !== duplicate.id))\n          setErrorType('error');\n          setErrorMessage(\n            `${duplicate.name} was already removed from the server`\n          );\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 3000); // leave the message for at least 3 seconds\n        });\n    };\n  };\n  const addPerson = (event) => {\n    event.preventDefault();\n\n    // Check if the person is already added, undefined if not\n    const duplicate = persons.find(person => person.name === newName)\n    if (duplicate !== undefined) {\n      updatePerson(duplicate);\n      return;\n    };\n\n    const personObject = {\n      name: newName,\n      number: newNumber\n    };\n\n    // concat returns a new object so we are not mutating the state variable\n    personService\n      .createContact(personObject)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson));\n        setNewName('');\n        setNewNumber('');\n        // check if we need to update the list of numbers\n        if (filterText === '' || returnedPerson.name.toLowerCase().includes(filterText.toLowerCase())) {\n          setFilteredPersons(filteredPersons.concat(returnedPerson))\n        }\n        setErrorType('message');\n        setErrorMessage(\n          `${returnedPerson.name} was added to the phonebook`\n        );\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 3000); // leave the message for at least 3 seconds\n      });\n  };\n\n  // handle the user typing in the name input element\n  const handlePersonChange = (event) => {\n    console.log(event.target.value);\n    setNewName(event.target.value); // updates the value of the input\n  };\n\n  // handle the user typing in the number input element\n  const handleNumberChange = (event) => {\n    console.log(event.target.value);\n    setNewNumber(event.target.value);\n  };\n\n  // handle the user typing in the filter input element\n  const handleFilterChange = (event) => {\n    console.log(event.target.value);\n    // filter the list of persons\n    setNewFilter(event.target.value);\n    const newPersons = event.target.value === '' \n      ? persons \n      : persons.filter(person => person.name.toLowerCase().includes(event.target.value.toLowerCase()));\n    setFilteredPersons(newPersons);\n  };\n\n  // handle deleting a contact\n  const deletePersonOf = (personID) => {\n    // confirm deletion\n    const toDelete = persons.find(p => p.id === personID);\n    const result = window.confirm(`Delete ${toDelete.name}?`);\n\n    if (!result) {\n      return;\n    };\n\n    personService\n      .deleteContact(personID)\n      .then(() => {\n        console.log('deleted');\n        setPersons(persons.filter(person => person.id !== personID));\n        setFilteredPersons(filteredPersons.filter(person => person.id !== personID));\n        setErrorType('message');\n        setErrorMessage(\n          `${toDelete.name} was removed from the phonebook`\n        );\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 3000); // leave the message for at least 3 seconds\n      })\n      .catch(error => {\n        setErrorType('error');\n        setErrorMessage(\n          `${toDelete.name} was already removed from the server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 3000); // leave the message for at least 3 seconds\n\n      })\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} type={errorType} />\n      \n      <Filter\n        filterText={filterText}\n        handleFilterChange={handleFilterChange} />\n\n      <h3>Add a new</h3>\n\n      <PersonForm \n        handleSubmit={addPerson}\n        handlePersonChange={handlePersonChange}\n        handleNumberChange={handleNumberChange}\n        newName={newName}\n        newNumber={newNumber}\n      />\n      \n      <h2>Numbers</h2>\n      <table>\n        <tbody>\n          {filteredPersons.map((person, i) => \n            <Person \n              key={i}\n              person={person}\n              handleDelete={() => deletePersonOf(person.id)}\n            />\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}